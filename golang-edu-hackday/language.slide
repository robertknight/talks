Go - Language

18 Jun 2014

* The Basics

* func main()

Every file has a 'package' clause at the top. The one for the entry point into an app has 'package main' at the top.

	package main

	func main() {
	}

* Importing packages

Go has a large standard library documented at [[http://golang.org/pkg/]].
To use a piece of functionality, import statements are required

	import "fmt"

If you import a package but don't use it, that is an _error_.

This gets a bit annoying, there is a tool that will add/remove imports
for you based on what you use in your code:

	go get code.google.com/p/go.tools/cmd/goimports

* Importing packages

Go has a simple rule about which functions and types are available
outside a package.

If a name starts with a *capital*letter* it is exported ('public'), otherwise it isn't.

.play code/exports.go

* Functions

Functions start with `func`, can return one or more values.

	func add(a int, b int) int {
		return a + b
	}

A very common pattern is

	func someFunc(a type, b type) (result, error)

eg:

	func currentTime() (string, error) {
		time, err := http.Get("timeapi.org/utc/now")
		if err != nil {
			return "", err
		}
		return time, nil
	}


* Functions

.play code/funcs.go

* Variables

Go has types, but usually inferred for variables.
Most common syntax is:

	someVar := initialValue

eg.

	myName := "Bob"

Or explicitly:

	var myName string
	myName = "Bob"

Unused variables are an _error_. Use an underscore
if you want to ignore a value.

	file, _ := os.Open("somefile.json")

* Variable Types

No automatic conversions between types, use explicit conversions

.play code/types.go

* Loops

Go only has one keyword for loops - `for`

	for i := 0; i < max; i++ {
	}

The first and third parts are optional, so a `while` loop is:

	for i < max {
	}

And a forever loop:

	for {
	}

* Loops - 2

A slight variation on the for loop is `range` for iterating over
arrays and maps.

.play code/arrays.go

* Arrays

Go has arrays but it is much more common to work with _slices_,
which are views onto part of an array.

Create a slice with `existingSlice[start:end]`

.play code/slices.go

* Arrays 2

Slices are immutable. Create new slices using `slice[low:high]` or `append()`

`append()` takes a slice, adds one or more elements to the underlying
array and returns a new slice.

The new slice _may_or_may_not_ use the same array.

	list := []int{1,2,3}
	list2 := append(list,4)

.image images/slices.svg

* Maps

Go has key/value maps as a built-in type.

	aMap := map[keyType]valueType{
		keyA : valueA,
		keyB : valueB
	}
	for key, value := range aMap {
		// ...
	}

* Maps

.play code/maps.go

* Maps

That last example is inefficient, we'll come back and add concurrency later.

* Structs

Structs declared with

	type <Name> struct {
		// fields
	}

These can be passed around via _reference_ or _value_.

	type Point struct {
		X float
		Y float
	}

	aPointValue := Point{X : 1, Y : 2}
	aPointReference := &Point{X : 2, Y : 3}

Note the *capital* letter on the field names to export them

* Methods

Go doesn't have classes but does have _methods_.
A method can be defined on any type.

	func (m MyType) SomeMethod() {
	}

	func (m *MyType) SomeMethod() {
	}

The receiver can be a value or a pointer.

* Methods

.play code/structs.go

* Interfaces

Some languages are _nominally_ typed, where functions
take a value that implements an interface with a certain name -
eg. C++, Java, C#

Others are _structurally_ typed, where functions
can take any argument that has certain properties - eg. Javascript,
Python, Ruby.

Go uses structural typing

* Interfaces

An interface is a list of methods.
_Any_ type which has those methods implements the interface.
There is no explicit link between the two.

Names usually end with _er_

	type Reader interface {
		Read(p []byte) (n int, error)
	}

Files, HTTP responses, buffers etc. all have a
_Read()_ method so they can be used wherever a _Reader_ is required.

* Interfaces - Example

.play code/interfaces.go

* Lambdas / closures

Can pass functions around as values and capture variables
from environment.

.play code/httpserve.go

* Errors

No exceptions, instead methods usually return (result, error).
_error_ is a simple interface:

	type error interface {
		Error() string
	}

* Formatting

There is a standard coding convention for Go code and a tool,
_go_fmt_ to format code.

	go fmt source.go

Reformats _source.go_ to use the house style

_goimports_ is a better version which also updates _import_
statements.

